@import "https://fonts.googleapis.com/css?family=Montserrat:300, 400, 700&display=swap";

/* This will below will affect every HTML element on the page:  */
* {
  padding: 0;
  margin: 0;
  /* box-sizing: border-box; on an element, padding and border are included in the width and height: */
  box-sizing: border-box;
}

html {
  font-size: 10px;
  /* specify the font of a text */
  /* The second are backups, in case the first one is not found. */
  font-family: "Montserrat", sans-serif;
  scroll-behavior: smooth;
}

a {
  /* remove the underline from links */
  text-decoration: none;
}

img {
  height: 100%;
  width: 100%;
  object-fit: cover;
}

p {
  color: black;
  font-size: 1.4rem;
  margin-top: 5px;
  line-height: 2.5rem;
  font-weight: 300;
  letter-spacing: 0.05rem;
}

.container {
  /* vh Relative to 1% of the height of the viewport */
  min-height: 100vh;
  width: 100%;
  /* The flex container becomes flexible by setting the display property to flex */
  display: flex;
  /* The align-items property specifies the default alignment for items inside a flexbox or grid container. */
  align-items: center;

  /* 
  The justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
  Tip: Use the align-items property to align the items vertically.
 */
  justify-content: center;
}

.section-title {
  font-size: 4rem;
  font-weight: 300;
  color: black;
  margin-bottom: 10px;
  text-transform: uppercase;
  letter-spacing: 0.2rem;
  text-align: center;
}

.section-title span {
  color: crimson;
}

.cta {
  /* Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values */
  display: inline-block;
  padding: 10px 30px;
  color: crimson;
  background-color: transparent;
  /* 
The border property is a shorthand property for the following individual border properties:
border-width
border-style (required)
border-color 
*/
  border: 2px solid crimson;
  /* 1em is equal to the current font size. The default text size in browsers is 16px. So, the default size of 1em is 16px. */
  font-size: 2rem;
  /* text-transform property is used to specify uppercase and lowercase */
  text-transform: uppercase;
  letter-spacing: 0.1rem;
  margin-top: 30px;

  transition-property: background-color, color;
  /* ease - specifies a transition effect with a slow start, then fast, then end slowly (this is default) */
  transition: 0.3s ease;
}

.cta:hover {
  color: white;
  background-color: crimson;
}

.brand h1 {
  font-size: 3rem;
  text-transform: uppercase;
  color: white;
}

.brand h1 span {
  color: crimson;
}

/* ------------------------------------------------------------------------ */
#header {
  /* The element is removed from the normal document flow, and no space is created for the element in the page layout.
   The element is positioned relative to its initial containing block, which is the viewport in the case of visual media.
    Its final position is determined by the values of top, right, bottom, and left. */
  position: fixed;
  z-index: 100;
  left: 0;
  top: 0;
  /* 1 vw Relative to 1% of the width of the viewport */
  width: 100vw;
  height: auto;
}

#header .header {
  min-height: 8vh;
  background-color: rgba(31, 30, 30, 0.24);

  /* see app.js */
  transition: 0.3s ease background-color;
}

.header .nav-bar {
  display: flex;
  align-items: center;

  /* The items are evenly distributed within the alignment container along the main axis. 
  The spacing between each pair of adjacent items is the same. 
  The first item is flush with the main-start edge, 
  and the last item is flush with the main-end edge. */
  justify-content: space-between;
  width: 100%;
  height: 100%;

  /* avoid excessive spacing*/
  max-width: 1300px;
  padding: 0 10px;
}

#header .nav-list ul {
  /* list-style-type:none */
  list-style: none;

  /* The element is removed from the normal document flow, 
  and no space is created for the element in the page layout.
  The element is positioned relative to its closest positioned ancestor  */
  position: absolute;
  background-color: rgb(31, 30, 30);
  width: 100vw;
  height: 100vh;

  /* initial position */
  left: 100%;
  top: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 1;

  overflow-x: hidden;

  /* smooth */
  transition: 0.5s ease left;
}

/* see app.js ,add the class active */
#header .nav-list ul.active {
  left: 0%;
}

#header .nav-list ul a {
  font-size: 2.5rem;
  font-weight: 500;
  letter-spacing: 0.2rem;
  text-decoration: none;
  color: white;
  text-transform: uppercase;
  padding: 30px;
  display: block;
}

#header .nav-list ul a::after {
  /*
  retrieves the value of an attribute of the selected element, 
  or the pseudo-element's originating element. The value of the element's attribute x is 
  an unparsed string representing the attribute name. 
  If there is no attribute x, an empty string is returned. 
  */
  content: attr(data-after);
  position: absolute;
  top: 50%;
  left: 50%;

  /* put the letters in the center scale=0 */
  transform: translate(-50%, -50%) scale(0);
  color: rgba(240, 248, 255, 0.21);
  font-size: 13rem;
  /* sets the horizontal spacing behavior between text characters. 
  This value is added to the natural spacing between characters  */
  letter-spacing: 50px;
  z-index: -1;
  transition: 0.3s ease letter-spacing;
}

#header .nav-list ul li:hover a::after {
  transform: translate(-50%, -50%) scale(1);
  letter-spacing: initial;
}

#header .nav-list ul li:hover a {
  color: crimson;
}

#header .hamburger {
  height: 60px;
  width: 60px;

  /* Compared to display: block, the major difference is that display: 
  inline-block does not add a line-break after the element, 
  so the element can sit next to other elements. */
  display: inline-block;
  border: 3px solid white;

  /* become a circle */
  border-radius: 50%;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 100;
  cursor: pointer;
  transform: scale(0.8);
  margin-right: 20px;
}

#header .hamburger::after {
  position: absolute;
  content: "";
  height: 100%;
  width: 100%;
  border-radius: 50%;
  border: 3px solid white;
  animation: hamburger_pulse 1s ease infinite;
}

@keyframes hamburger_pulse {
  0% {
    opacity: 1;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(1.4);
  }
}

#header .hamburger .bar {
  height: 2px;
  width: 30px;
  position: relative;
  background-color: white;
  /* z-index: -1; */
}

#header .hamburger .bar::after,
#header .hamburger .bar::before {
  content: "";
  position: absolute;
  height: 100%;
  width: 100%;
  left: 0;
  background-color: white;
  transition: 0.3s ease;
  transition-property: top, bottom;
}

#header .hamburger .bar::after {
  top: 8px;
}
#header .hamburger .bar::before {
  bottom: 8px;
}

/* after click, see app.js */
#header .hamburger.active .bar::before {
  bottom: 0;
}
#header .hamburger.active .bar::after {
  top: 0;
}

/* -------------------------------------------------- */
#hero {
  background-image: url(/Practice/img/hero-bg.png);
  background-size: cover;
  background-position: top center;
  /* positioned relative to its normal position */
  position: relative;
  /* sets the z-order of a positioned element and its descendants or flex and grid items. Overlapping elements with a larger z-index cover those with a smaller one. */
  z-index: 1;
}

/* inserts something after the content of each selected element(s). */
#hero::after {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 100%;
  background-color: black;
  opacity: 0.7;
  z-index: -1;
}

/* only the class hero in #hero take effects */
#hero .hero {
  /* make sure the distance to right side is less than 1200px */
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 50px;

  /*  Items are positioned at the beginning of the container */
  justify-content: flex-start;
}

/* only h1 in hero take effects */
#hero h1 {
  display: block;

  /* Use the available space, but not more than max-content */
  width: fit-content;
  font-size: 4rem;
  position: relative;
  color: transparent;

  /* ease - Specifies an animation with a slow start, then fast, then end slowly */
  /* forwards - The element will retain the style values that is set by the last keyframe */
  animation: text_reveal 0.5 ease forwards;
  animation-delay: 1s;
}

/* nth-child() matches every element that is the nth child of its parent. */
#hero h1:nth-child(1) {
  animation-delay: 1s;
}

#hero h1:nth-child(2) {
  animation-delay: 2s;
}

#hero h1:nth-child(3) {
  animation: text_reveal_name 0.5s ease forwards;
  animation-delay: 3s;
}

#hero h1 span {
  position: absolute;
  top: 0;
  left: 0;

  /* euqal to the height of h1 */
  height: 100%;
  width: 0;
  background-color: crimson;
  animation: text_reveal_box 1s ease;
  animation-delay: 0.5s;
}

#hero h1:nth-child(1) span {
  animation-delay: 0.5s;
}

#hero h1:nth-child(2) span {
  animation-delay: 1.5s;
}

#hero h1:nth-child(3) span {
  animation-delay: 2.5s;
}

@keyframes text_reveal_box {
  50% {
    width: 100%;
    left: 0;
  }

  100% {
    width: 0;
    left: 100%;
  }
}

@keyframes text_reveal {
  100% {
    color: white;
  }
}

@keyframes text_reveal_name {
  100% {
    color: crimson;
    font-weight: 900;
  }
}

/* ----------------------------------------------------------------------------- */

#services .services {
  flex-direction: column;

  /* Stretches the lines so that each line has equal width */
  text-align: justify;
  max-width: 1500px;
  margin: 0 auto;
  padding: 100px 0;
}

#services .service-top {
  width: 500px;
  margin: 0 auto;
}

#services .service-bottom {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
}

#services .service-item {
  /* The flex-basis property specifies the initial length of a flexible item. */
  flex-basis: 80%;
  display: flex;

  /* The align-items property specifies the default alignment for items inside a flexbox or grid container. */
  align-items: flex-start;
  justify-content: center;
  flex-direction: column;
  padding: 30px;
  border-radius: 10px;
  background-image: url(/Practice/img/img-1.png);
  background-size: cover;
  margin: 10px 5%;
  position: relative;
  z-index: 1;
  /* the hidden value, the overflow is clipped, and the rest of the content is hidden */
  overflow: hidden;
  margin-top: 50px;
}

#services .service-item::after {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 100%;

  /* linear-gradient(direction, color-stop1, color-stop2, ...); */
  background-image: linear-gradient(60deg, #29323c 0%, #485563 100%);
  opacity: 0.9;
  z-index: -1;
}

#services .service-bottom .icon {
  height: 80px;
  width: 80px;
  margin-bottom: 20px;
}

#services .service-item h2 {
  font-size: 2rem;
  color: white;
  margin-bottom: 10px;
  text-transform: uppercase;
}

#services .service-item p {
  color: white;
  text-align: left;
}

/* ----------------------------------------------------------------------- */

#projects .projects {
  flex-direction: column;
  max-width: 1200px;
  margin: 0 auto;
  padding: 100px 0;
}

#projects .projects-header h1 {
  margin-bottom: 50px;
}

#projects .all-projects {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

#projects .project-item {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  width: 80%;
  margin: 20px auto;
  overflow: hidden;
  border-radius: 10px;
}

#projects .project-info {
  padding: 30px;
  flex-basis: 50%;
  background-color: white;
  height: 100%;
  display: flex;
  align-items: flex-start;
  justify-content: center;
  flex-direction: column;
  background-image: linear-gradient(60deg, #29323c 0%, #485563 100%);
  color: white;
}

#projects .project-info h1 {
  font-size: 4rem;
  font-weight: 500;
}

#projects .project-info h2 {
  font-size: 1.8rem;
  font-weight: 500;
  margin-top: 10px;
}

#projects .project-info p {
  color: white;
}

#projects .project-image {
  flex-basis: 50%;
  height: 300px;

  overflow: hidden;
  position: relative;
}

#projects .project-image::after {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 100%;
  background-image: linear-gradient(60deg, #29323c 0%, #485563 100%);
  opacity: 0.7;
}

#projects .project-image img {
  transition-property: transform;
  transition-duration: 0.3s;
  transition-timing-function: ease;
}

#projects .project-item .project-image:hover img {
  transform: scale(1.1);
}

/* ----------------------------------------------------------------- */

#about .about {
  flex-direction: column-reverse;
  text-align: center;
  max-width: 1200px;
  margin: 0 auto;
  padding: 100px 20px;
}

#about .col-left {
  width: 250px;
  height: 360px;
}

#about .col-right {
  width: 100%;
}

#about .col-right h2 {
  font-size: 1.8rem;
  font-weight: 500;
  letter-spacing: 0.2rem;
  margin-bottom: 10px;
}

#about .col-right p {
  margin-bottom: 20px;
}

#about .col-right .cta {
  margin-bottom: 50px;
  padding: 10px 20px;
  font-size: 2rem;
}

#about .col-left .about-img {
  height: 100%;
  width: 100%;
  position: relative;
  border: 10px solid white;
}

#about .col-left .about-img::after {
  content: "";
  position: absolute;
  left: -33px;
  top: 19px;
  height: 98%;
  width: 98%;
  border: 7px solid crimson;
  z-index: -1;
}

/* ---------------------------------------------------------- */

#contact .contact {
  flex-direction: column;
  max-width: 1200px;
  margin: 0 auto;
  width: 90%;
}

#contact .contact-items {
  /* max-width: 400px; */
  width: 100%;
}

#contact .contact-item {
  width: 80%;
  padding: 20px;
  text-align: center;
  border-radius: 10px;
  padding: 30px;
  margin: 30px;
  display: flex;
  justify-content: center;

  /*
   align-content determines the spacing between lines
  align-items determines how the items as a whole are aligned within the container.
  When there is only one line, align-content has no effect
 */
  align-items: center;
  flex-direction: column;

  /* the third value is interpreted as <blur-radius>. The larger this value, the bigger the blur, so the shadow becomes bigger and lighter. */
  /*  the fourth value is interpreted as <spread-radius>. Positive values will cause the shadow to expand and grow bigger, negative values will cause the shadow to shrink. If not specified, it will be set to 0 (that is, the shadow will be the same size as the element */
  box-shadow: 0px 0px 18px 0 #0000002c;
  transition-property: box-shadow;
  transition-timing-function: ease;
  transition-duration: 0.3s;
}

#contact .contact-item:hover {
  box-shadow: 0px 0px 5px 0 #0000002c;
}

#contact .icon {
  width: 70px;
  margin: 0 auto;
  margin-bottom: 10px;
}

#contact .contact-info h1 {
  font-size: 2.5rem;
  font-weight: 500;
  margin-bottom: 5px;
}

#contact .contact-info h2 {
  font-size: 1.3rem;
  line-height: 2rem;
  font-weight: 500;
}

/* ---------------------------------------------------- */

#footer {
  background-image: linear-gradient(60deg, #29323c 0%, #485563 100%);
}

#footer .footer {
  min-height: 200px;
  flex-direction: column;
  padding-top: 50px;
  padding-bottom: 10px;
}

#footer h2 {
  color: white;
  font-weight: 500;
  font-size: 1.8rem;
  letter-spacing: 0.1rem;
  margin-top: 10px;
  margin-bottom: 10px;
}

#footer .social-icon {
  display: flex;
  margin-bottom: 30px;
}

#footer .social-item {
  height: 50px;
  width: 50px;
  margin: 0 5px;
}

#footer .social-item img {
  /* defines visual effects (like blur and saturation) to an element  */
  filter: grayscale(1);
  transition: 0.3s ease filter;
}

#footer .social-item:hover img {
  filter: grayscale(0);
}

#footer p {
  color: white;
  font-size: 1.3rem;
}

/* --------------------------------------------------------------- */

/* screen	Used for computer screens, tablets, smart-phones etc. */
@media only screen and (min-width: 768px) {
  .cta {
    font-size: 2.5rem;
    padding: 20px 60px;
  }
  h1.section-title {
    font-size: 6rem;
  }

  #hero h1 {
    font-size: 7rem;
  }

  #services .service-bottom .service-item {
    flex-basis: 45%;
    margin: 2.5%;
  }

  #projects .project-item {
    height: 400px;
    margin: 0;
    width: 100%;
    border-radius: 0;
    flex-direction: row;
  }

  #projects .project-item:nth-child(even) {
    flex-direction: row-reverse;
  }

  #projects .all-projects .project-info {
    height: 100%;
  }

  #projects .all-projects .project-image {
    height: 100%;
  }

  #about .about {
    flex-direction: row;
  }

  #about .col-left {
    width: 600px;
    height: 400px;
    padding-left: 60px;
  }

  #about .about .col-left .about-img::after {
    left: -45px;
    top: 34px;
    height: 98%;
    width: 98%;
    border-width: 10px;
    border-style: solid;
    border-color: crimson;
  }

  #about .col-right {
    text-align: left;
    padding: 30px;
  }

  #about .col-right h1 {
    text-align: left;
  }

  #contact .contact {
    flex-direction: column;
    padding: 100px 0;
    align-items: center;
    justify-content: center;
    min-width: 20vh;
  }

  #contact .contact-items {
    width: 100%;
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    margin: 0;
  }

  #contact .contact-item {
    width: 30%;
    margin: 0;
    flex-direction: row;
  }

  #contact .contact-item .icon {
    height: 100px;
    width: 100px;
  }

  #contact .contact-item .icon img {
    object-fit: contain;
  }

  #contact .contact-item .contact-info {
    width: 100%;
    text-align: left;
    padding-left: 20px;
  }
}

@media only screen and (min-width: 1200px) {
  #header .hamburger {
    /* don't display */
    display: none;
  }

  #header .nav-list ul {
    position: initial;
    display: block;
    height: auto;
    width: fit-content;
    background-color: transparent;
  }
  #header .nav-list ul li {
    display: inline-block;
  }

  #header .nav-list ul a {
    font-size: 1.8rem;
  }

  #header .nav-list ul a:after {
    display: none;
  }
  #services .service-bottom .service-item {
    flex-basis: 22%;
    margin: 1.5%;
  }
}
